/**
 * @file kindlebt.h
 * @brief Bluetooth library for Kindles.
 *
 * This will be the entrypoint to the library and where all the Bluetooth functionality
 * will be exposed.
 *
 * As an application, you should generally just need to include this file.
 */

#ifndef KINDLE_BT_H
#define KINDLE_BT_H

#include <stdbool.h>

#include "kindlebt_defines.h"
#include "kindlebt_utils.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @defgroup KINDLEBT_PUBLIC_API Kindlebt Public API
 *
 * @brief The public API of kindlebt
 *
 * Kindlebt just implements a small subset of the Bluetooth standard. This autogenerated
 * documentation will then serve as a reference of the currently implemented
 * functionality.
 *
 * @remark To use these functions, include @ref kindlebt.h "<kindlebt/kindlebt.h>"
 * @par
 * @remark For an example usage of connecting to a BLE device, then reading/writing and
 * setting notifications on a characteristic, check @ref basic_usage.c
 *
 * @sa DARKROOT_DS
 *
 * @{
 */

/**
 * @brief Is BLE supported by the hardware Bluetooth adapter
 */
bool isBLESupported(void);

/**
 * @brief Turn on the Bluetooth radio.
 *
 * @note Usually @ref openSession and @ref closeSession will manage it on its own.
 * @note Enabling/disabling the radio is an asynchronous operation, so it requires
 * waiting for a callback. The @ref status_t response only indicates whether the request
 * was made successfully or not.
 *
 * @warning To receive the operation result, you should register for the
 * \c adapter_state_cb callback in @ref commonCallbacks_t
 * @sa @ref darkroot
 */
status_t enableRadio(sessionHandle session_handle);

/**
 * @brief Turn off the Bluetooth radio.
 *
 * @note Usually @ref openSession and @ref closeSession will manage it on its own.
 * @note Enabling/disabling the radio is an asynchronous operation, so it requires
 * waiting for a callback. The @ref status_t response only indicates whether the request
 * was made successfully or not.
 *
 * @warning To receive the operation result, you should register for the
 * \c adapter_state_cb callback in @ref commonCallbacks_t
 * @sa @ref darkroot
 */
status_t disableRadio(sessionHandle session_handle);

/**
 * @brief Get current radio status.
 *
 * @param p_out_state The radio state will be written out to this reference
 */
status_t getRadioState(state_t* p_out_state);

/**
 * @brief Gets the supported Bluetooth session type (Classic, BLE, Dual).
 */
sessionType_t getSupportedSession(void);

/**
 * @brief Open a Bluetooth session.
 *
 * Necessary and basically the entrypoint of the whole library.
 */
status_t openSession(sessionType_t session_type, sessionHandle* session_handle);

/**
 * @brief Close a Bluetooth session.
 */
status_t closeSession(sessionHandle session_handle);

/**
 * @brief Register as BLE client
 *
 * Necessary for any BLE operations.
 */
status_t bleRegister(sessionHandle session_handle);
/**
 * @brief Deregister as BLE client
 */
status_t bleDeregister(sessionHandle session_handle);

/**
 * @brief Register as a BLE GATT Client
 *
 * Necessary for any GATT Client operations.
 */
status_t bleRegisterGattClient(sessionHandle session_handle, bleGattClientCallbacks_t* callbacks);
/**
 * @brief Deregister as a BLE GATT Client
 */
status_t bleDeregisterGattClient(sessionHandle session_handle);
/**
 * @brief Discover all services of a remote GATT Server
 *
 * Necessary step to discover the GATT Server services. Must be called before
 * @ref bleGattDatabase.
 */
status_t bleDiscoverAllServices(sessionHandle session_handle, bleConnHandle conn_handle);
/**
 * @brief Retrieve all services of a remote GATT Server
 *
 * After discovery (@ref bleDiscoverAllServices) you need to retrieve the services.
 * Inside the services you'll also find the available characteristics. Even if you know
 * the Characteristic UUID ahead of time, this step is necessary to populate the local
 * references.
 */
status_t bleGetDatabase(bleConnHandle conn_handle, bleGattsService_t* p_gatt_service);

/**
 * @brief Connect to a BLE device
 */
status_t bleConnect(
    sessionHandle session_handle, bleConnHandle* conn_handle, bdAddr_t* p_device,
    bleConnParam_t conn_param, bleConnRole_t conn_role, bleConnPriority_t conn_priority
);
/**
 * @brief Disconnect from a BLE device
 */
status_t bleDisconnect(bleConnHandle conn_handle);

/**
 * @brief Read a Characteristic from a BLE device.
 *
 * @sa utilsFindCharRec
 */
status_t bleReadCharacteristic(
    sessionHandle session_handle, bleConnHandle conn_handle,
    bleGattCharacteristicsValue_t chars_value
);
/**
 * @brief Write a Characteristic from a BLE device.
 *
 * @sa utilsFindCharRec
 */
status_t bleWriteCharacteristic(
    sessionHandle session_handle, bleConnHandle conn_handle,
    bleGattCharacteristicsValue_t* chars_value, responseType_t request_type
);
/**
 * @brief Write a Characteristic Descriptor from a BLE device.
 *
 * @sa utilsFindCharRec
 */
status_t bleWriteDescriptor(
    sessionHandle session_handle, bleConnHandle conn_handle,
    bleGattCharacteristicsValue_t* chars_value, responseType_t request_type
);
/**
 * @brief Set notifications on a Characteristic from a BLE device.
 *
 * @sa utilsFindCharRec
 */
status_t bleSetNotification(
    sessionHandle session_handle, bleConnHandle conn_handle,
    bleGattCharacteristicsValue_t chars_value, bool enable
);

/** @} */ // KINDLEBT_PUBLIC_API

/**
 * @brief [Internal] Clone a GATT Service
 *
 * @warning As an application you shouldn't need to use this function. It is used by
 * @ref bleGetDatabase in the background.
 */
status_t bleCloneGattService(
    bleGattsService_t** dst_gatt_service, const bleGattsService_t* src_gatt_service, int no_svc
);

/**
 * @example basic_usage.c
 * This is an example of how to use kindlebt to register as a GATT Client, connect to a
 * BLE device, and read, write, and set notifications on a Characteristic that supports
 * all these options.
 */

#ifdef __cplusplus
}
#endif

#endif // KINDLE_BT_H
